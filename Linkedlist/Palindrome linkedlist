//Check if a linked list is a palindrome
#include <iostream>
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
using namespace std;
#include "solution.h"
node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node*head=takeinput();
    bool ans=check_palindrome(head);
    if(ans)
        cout<<"true";
    else 
        cout << "false";
    return 0;
}

bool check_palindrome(node* head)
{
    //write your code here
    
    int c=0;
    node *temp = head;
    // count the length of linkedlist
    while(temp != NULL){        
        c++;
        temp = temp ->next;
    }
    
    // break the linkedlist in two half
    int mid = (c-1)/2;
    int i=0;
    node * head2= head;
    while(i<mid){
        head2=head2->next;
        i++;
    }
    temp = head2->next ;
    head2->next = NULL;
    head2= temp;
    
    // reverse the second half of the linkedlist
    node *pre = NULL;    
    node *next = NULL;
    node *current = head2;
    while(current != NULL){
        next = current->next;
        current ->next = pre;
        pre= current ;
        current = next;
    }
    head2 = pre;
    
    // compare the second half linkedlist to first half linkedlis
    node *temp1=head;
    node *temp2 = head2;
    while( temp2 != NULL){
        if(temp1->data != temp2->data){
            return false;
        }
        temp1=temp1->next;
        temp2=temp2->next;
    }
    return true;   
    
}

