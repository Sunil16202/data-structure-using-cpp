//Arrange elements in a Linked List such that all even numbers are placed after odd numbers
#include <iostream>
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};

using namespace std;
#include "solution.h"
node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node*head=takeinput();
    head=arrange_LinkedList(head);
    print(head);
    return 0;
}
// Following is the node structure
/**************
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};
***************/

node* arrange_LinkedList(node* head)
{
    //write your code here
    node* oddh=NULL;
    node* oddt= NULL;
    node* eveh=NULL;
    node* evet= NULL;
    if(head == NULL){
        return head;
    }
    node* temp = head;
    while( temp != NULL){
        if((temp->data)%2 != 0 ){
            if(oddh == NULL){
                oddh = temp;
                oddt = temp;
                temp = temp->next;
            }
            else{
                oddt->next =temp;
                oddt=oddt->next;
                temp = temp->next;
            }
        }
        else{
            if(eveh == NULL){
                eveh = temp;
                evet = temp;
                temp = temp->next;
            }
            else{
                evet ->next = temp;
                evet = evet->next;
                temp = temp->next;
            }
        }
    }
    evet != NULL;
    oddt != NULL;
    
    if(oddh == NULL){
        return eveh;
    }
    else if(eveh == NULL){
        return oddh;
    }
    else{
        oddt->next = eveh;
        return oddh;
    }
    
    
    
}
