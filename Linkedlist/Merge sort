//merge sort recursive
#include <iostream>
class node{
public:
    int data;
    node * next;
    node(int data){
        this->data=data;
        this->next=NULL;
    }
};

using namespace std;
#include "solution.h"
node* takeinput(){
    int data;
    cin>>data;
    node* head=NULL,*tail=NULL;
    while(data!=-1){
        node *newnode=new node(data);
        if(head==NULL)                  {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            tail=newnode;
        }
        cin>>data;
    }
    return head;
}
void print(node *head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
    node* head=takeinput();
    head= mergeSort(head);
    print(head);
    return 0;
}

node* mergeTwosorted( node* head , node* head1);

node* mergeSort(node *head) {
    //write your code here
    
    // break the linkedlist into two half
    if( head == NULL || head->next == NULL){
        return head;
    }
    
    int c=0;
    node *temp =head;
    
    while( temp != NULL){
        c++;
        temp= temp->next;
    }
    
    int m = c/2;
    int i=1;
    temp = head;
    while( i<m){
        temp = temp->next;
        i++;
    }
    node *head1 = temp->next;
    temp->next =NULL;
    
    head =mergeSort (head);
    head1=mergeSort (head1);

    return mergeTwosorted(head,head1);
    
}

node* mergeTwosorted( node* head, node* head1){
    node* ft =NULL;
    node* fh = NULL;
    
    
    if( head == NULL){
        return head1;
    }
    if( head1 == NULL){
        return head;
    }
    
    if( head->data < head1->data){
        fh= head;
        ft = head;
        head = head->next;
    }
    else{
        fh = head1;
        ft = head1;
        head1 = head1->next;
    }
    
    while( head != NULL && head1 != NULL){
        if(head->data < head1 -> data){
            ft->next = head;
            ft = ft->next;
            head= head->next;
        }
        else{
            ft->next = head1;
            ft =ft->next;
            head1 = head1->next;
        }
    }
    
    if(head == NULL){
        ft->next = head1;
        ft= ft->next;
    }
    if(head1 == NULL){
        ft ->next = head;
        ft = ft->next;
    }
    return fh;
}
