Given an undirected and connected graph G(V, E), print its BFS traversal.
Here you need to consider that you need to print BFS path starting from vertex 0 only.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Note : Take graph input in adjacency matrix.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
BFS Traversal (separated by space)
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2

#include <iostream>
#include<iostream>
#include<queue>
using namespace std;
void print(int ** edges,int n, int sv){
    bool *visited = new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
    }
    queue<int> pandingVertex;
    pandingVertex.push(sv);
    visited[sv]=true;
    while(!pandingVertex.empty()){
        int current = pandingVertex.front();
        pandingVertex.pop();
        cout<<current<<" ";
        for(int i=0;i<n;i++){
            if(i==sv){
                continue;
            }
            if(edges[current][i]==1 && !visited[i]){
                pandingVertex.push(i);
                visited[i]=true;
            }
        }
    }
    
    
}

int main() {
    int v, e;
    cin >> v >> e;

  /*

  	   Write Your Code Here
	   Complete the Rest of the Program
	   You have to take input and print the output yourself
	 
  */

    int **edges = new int*[v];
    for(int i=0;i<v;i++){
        edges[i]= new int[v];
        for(int j=0;j<v;j++){
            edges[i][j]=0;
        }
    }
    
    // take input
    for(int i=0;i<e;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s]=1;
        edges[s][f]=1;
    }
    print(edges,v,0);

    
    for(int i=0;i<v;i++){
        delete []edges[i];
    }
    delete [] edges;
    
  return 0;
}
