Its Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with eachother on the cake. Given the size of cake N and the cake , can you find the size of the biggest piece of '1's for Gary ?
Constraints :
1<=N<=50
Input Format :
Line 1 : An integer N denoting the size of cake 
Next N lines : N characters denoting the cake
Output Format :
Size of the biggest piece of '1's and no '0's
Sample Input :
2
11
01
Sample Output :
3

#include<vector>
using namespace std;
#define NMAX 55
#include "solution.h"
char cake[NMAX][NMAX];
int main()
{
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		scanf("%s",cake[i]);
	}
	cout<<solve(n,cake)<<endl;
}

#include<bits/stdc++.h>
int dfs(int i, int j,int n, char cake[NMAX][NMAX],bool **visited){
    if(i<0 || j<0 || i>=n || j>=n || visited[i][j] == 1)
        return 0;
    int maximum =0;
    int count =0;
    int count1=0,count2=0,count3=0,count4=0;
        visited[i][j]=true;
        if(cake[i][j] == '1'){
            count1 = dfs(i,j+1,n,cake,visited);
            count2 = dfs(i, j-1,n,cake,visited);
            count3 = dfs(i-1,j,n,cake,visited);
            count4 = dfs(i+1,j,n,cake, visited);
            count = count1 + count2 + count3 + count4+1;
            maximum = count;
        }
    return maximum;
}

int solve(int n,char cake[NMAX][NMAX])
{
	// Write your code here .
    bool **visited = new bool*[n];
   for(int i=0;i<n;i++){
       visited[i]=new bool[n];
       for(int j=0;j<n;j++){
           visited[i][j]=0;
       }
   }
    int maximum =0;
    int count =0;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(!visited[i][j]){
                count = dfs(i,j,n,cake,visited);
                maximum = max(count , maximum);
            }
        }
    }
    for(int i=0;i<n;i++){
        delete [] visited[i];
    }
    delete [] visited;
    return maximum;
}
