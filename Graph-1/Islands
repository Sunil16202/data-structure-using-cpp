An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given N islands (numbered from 1 to N) and two lists of size M (u and v) denoting island u[i] is connected to island v[i] and vice versa . Can you count the number of connected groups of islands.
Constraints :
1<=N<=100
1<=M<=(N*(N-1))/2
1<=u[i],v[i]<=N
Input Format :
Line 1 : Two integers N and M
Line 2 : List u of size of M
Line 3 : List v of size of M
Output Return Format :
The count the number of connected groups of islands
Sample Input :
2 1
1
2
Sample Output :
1 

#include<iostream>
#include<vector>
using namespace std;
#include "solution.h"

int main()
{
	int n,m;
	vector<int>u,v;
	cin>>n>>m;
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		u.push_back(x);
	}
	for(int i=0;i<m;i++)
	{
		int x;
		cin>>x;
		v.push_back(x);
	}
	cout<<solve(n,m,u,v)<<endl;
}

#include<vector>
using namespace std;
int dfs(int **adj,int n, int sv, bool *visited){
    visited[sv]=true;
    for(int i=0;i<n;i++){
        if(i==sv){
            continue;
        }
        if(adj[sv][i] == 1 && !visited[i]){
            dfs(adj,n,i,visited);
        }
    }
}

int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
    int **adj = new int*[n];
    for(int i=0;i<=n;i++){
        adj[i]= new int[n];
    }
    for(int i=0;i<m;i++){
        int f=u[i]-1;
        int s=v[i]-1;
        adj[f][s]=1;
        adj[s][f]=1;
    }
    bool *visited = new bool[n];
    for(int i=0;i<n;i++){
        visited[i]=false;
    }
    int count=0;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            count++;
            dfs(adj,n,i,visited);
        }
    }
    
    delete [] visited;
    for(int i=0;i<n;i++){
        delete [] adj[i];
    }
    delete [] adj;
    return count;
}
