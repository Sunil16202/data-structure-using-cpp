Given an undirected graph G(V,E), check if the graph G is connected graph or not.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
E is the number of edges present in graph G.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next 'E' lines, each have two space-separated integers, 'a' and 'b', denoting that there exists an edge between Vertex 'a' and Vertex 'b'.
Output Format :
"true" or "false"
Constraints :
2 <= V <= 1000
1 <= E <= 1000
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 

#include<queue>
#include<iostream>
using namespace std;

bool BFS(int** adjMatrix, int v){	
	// Source -> 0th vertex	
	bool* visited = new bool[v](); // all initialised with false
queue<int>q;
  q.push(0);//source
  visited[0]=true;
  while(!q.empty()){
    //print current vertex
    //cout<<q.front()<<" ";
	for(int i = 0; i < v; i++){
      
		// check if i is neighbor of currentVertex && i isn't visited
		if(adjMatrix[q.front()][i] &&  !visited[i]){
          //push neighbours
          q.push(i);
          visited[i]=true;
		}
  }
    q.pop();
}
  for(int i=0;i<v;i++){
    if(!visited[i])return false;
  }
  return true;
}


int main(){
	int v, e;
	cin >> v >> e;
	int** adjMatrix = new int*[v];
	for(int i = 0; i < v; i++){
		adjMatrix[i] = new int[v]();
	}

	for(int i = 0; i < e; i++){
		int v1, v2;
		cin >> v1 >> v2;
		adjMatrix[v1][v2] = 1;
		adjMatrix[v2][v1] = 1;
	}
	bool k=BFS(adjMatrix, v);
  if(k)cout<<"true";
  else cout<<"false";

}
