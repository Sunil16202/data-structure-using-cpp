#include <iostream>
#include <queue>

template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

using namespace std;
#include "solution.h"

BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    if(isBalanced(root))
    	cout << "true" << endl;
    else
	cout << "false" << endl;
}


// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};
***************/
#include<bits/stdc++.h>
using namespace std;
class helper
{
    public:
    bool isBalanced;
    int height;
};
helper fun(BinaryTreeNode<int> *root )
{
 if(root==NULL)
    {
        helper obj;
        obj.isBalanced=1;
        obj.height=0;
        return obj;
    }
    
    helper leftobj,rightobj;
    leftobj=fun(root->left);
    rightobj=fun(root->right);
    helper ans;
    if(leftobj.isBalanced==0 || rightobj.isBalanced==0)
    {
        ans.isBalanced=0;
        ans.height=1+max(leftobj.height,rightobj.height);
    }
    else
    {
        if(abs(leftobj.height-rightobj.height)<=1)
            ans.isBalanced=1;
        else 
            ans.isBalanced=0;
        ans.height=1+max(leftobj.height,rightobj.height);
    }
    return ans;
        
    
    

}

bool isBalanced(BinaryTreeNode<int> *root) {
    // Write your code here
    
    helper obj;
    obj = fun(root);
    return obj.isBalanced;
    

}
