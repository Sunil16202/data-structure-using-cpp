#include<iostream>
using namespace std;

template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

#include "BinarySearchTree.h"


int main(){
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->deleteData(input);
                break;
            case 3:
                cin >> input;
                if(tree->hasData(input)) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
                break;
            default:
                tree->printTree();
                return 0;
                break;
        }
    }
}


/**************
 
 * Following is BinaryTreeNode class -
 
template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
 
 * Foloowing is main function which we are using internally

int main(){
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->deleteData(input);
                break;
            case 3:
                cin >> input;
                if(tree->hasData(input)) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
                break;
            default:
                tree->printTree();
                return 0;
                break;
        }
    }
}
*******************/


class BST {
	// Complete this class
    
    public:
    BinaryTreeNode<int>* root;
    
    BST(){
        root= NULL;
    }
    
    ~BST(){
        delete root;
    }
    private:
    BinaryTreeNode<int>* deleteData(int data, BinaryTreeNode<int>* root){
        if(root == NULL){
            return NULL;
        }
        
        if(data > root->data){
            root->right = deleteData(data, root->right);
            return root;
        }
        else if(data < root->data){
            root->left = deleteData(data,root->left);
            return root;
        }
        else{
            if(root->left == NULL && root->right == NULL){
                delete root;
                return NULL;
            }
            else if(root -> left == NULL){
                BinaryTreeNode<int>* temp = root->right;
                root->right=NULL;
                return temp;
            }
            else if(root->right == NULL){
                BinaryTreeNode<int>* temp = root->left;
                root->left = NULL;
                return temp;
            }
            else{
                BinaryTreeNode<int>* minNode = root->right;
                while(minNode ->left != NULL){
                    minNode = minNode->left;
                }
                int rightMin = minNode->data;
                root->data = rightMin;
                root->right = deleteData(rightMin, root->right);
                return root;
            }
        }
        
    }
    public:
    void deleteData(int data){
        root = deleteData(data, root);
        
    }
    private:
    BinaryTreeNode<int>* insert(int data, BinaryTreeNode<int>* root){
        if(root == NULL){
            BinaryTreeNode<int>* newNode = new BinaryTreeNode<int>(data);
            return newNode;
        }
        if(data<root->data){
            root->left = insert(data,root->left);
        }
        else{
            root->right = insert(data, root->right);
        }
        return root;
    }
    public:
    BinaryTreeNode<int>* insert(int data){
        this->root = insert(data, this->root);
        
    }
    
    private:
    bool hasData(int data, BinaryTreeNode<int>* root){
        if(root == NULL){
            return false;
        }
        if(root->data == data){
            return true;
        }
        else if(data < root->data ){
            return hasData(data , root->left);
        }
        else{
            return hasData(data, root->right);
        }
    }
    public:
    bool hasData(int data){
        return hasData(data, root);
    }
    private:
    void printTree(BinaryTreeNode<int>* root){
        
        if(root == NULL){
            return;
        }
        cout<<root->data<<":";
        if(root->left != NULL){
            cout<<"L:"<<root->left->data<<",";
        }
        if(root->right != NULL){
            cout<<"R:"<<root->right->data;
        }
        cout<<endl;
        printTree(root->left);
        printTree(root->right);
        
    }
    public:
    void printTree(){
        BinaryTreeNode<int>* root;
        printTree(this->root);
    }
 
    
};
