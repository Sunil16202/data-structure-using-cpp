/* C++ implementation to convert infix expression to postfix*/
// Note that here we use std::stack  for Stack operations
#include <vector>
#include <climits>
#include <iostream>
using namespace std;
#include "Solution.h"



//Driver program to test above functions
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    switch(choice){
            // Add
        case 1:
        {
            Polynomial result1 = first + second;
            result1.print();
            break;
        }
            // Subtract
        case 2 :
        {
            Polynomial result2 = first - second;
            result2.print();
            break;
        }
            // Multiply
        case 3 :
        {
            Polynomial result3 = first * second;
            result3.print();
            break;
        }
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}


class Polynomial {
    public:
    int *degCoeff;      // Name of your array (Don't change this)
    
    // Complete the class
    int capacity;

    // Default constructor
    public:
    Polynomial(){
        degCoeff= new int[5];
        for(int i=0; i<5;i++){
            degCoeff[i]=0;
        }
        capacity=5;
    }
    
    //copy constructor
    Polynomial( Polynomial const &p){
        //deep copy
          capacity = p.capacity;
          degCoeff = new int[p.capacity];
        for(int i=0;i<p.capacity;i++){
            degCoeff[i]=p.degCoeff[i];
        }
    }
    
    //setCoefficient
    void setCoefficient( int degree, int coeffi){
        if(degree>= capacity){
            int newCapacity = capacity;
            while(newCapacity<=degree){
                newCapacity *=2;
            }
            //capacity = newCapacity;
            int *newPoly = new int[newCapacity];
            // initilize the new array
            for(int i=0;i<newCapacity;i++){
                newPoly[i]=0;
            }
            
            for(int i=0;i<capacity;i++){
                newPoly[i]=degCoeff[i];
            }
            delete [] degCoeff;
            degCoeff= newPoly;
            capacity = newCapacity;
            
            degCoeff[degree]= coeffi;
            
        }
        else{
            degCoeff[degree]=coeffi;
        }
    }
    
    //+ operator overloading
    
    Polynomial operator+( Polynomial p){
        int len=0;
        if(capacity >= p.capacity){
            len = capacity;
        }
        else{
            len = p.capacity;
        }
        int *newPoly = new int [len];
        // initilize the array
        for(int i=0;i<len;i++){
            newPoly[i]=0;
        }
        
        // add two polynomial
        if(capacity >= p.capacity){
            for(int i=0;i<p.capacity;i++){
                newPoly[i]=degCoeff[i]+p.degCoeff[i];
            }
            for(int i=p.capacity; i<capacity; i++){
                newPoly[i]=degCoeff[i];
            }
        }
        else{
            for(int i=0;i<capacity;i++){
                newPoly[i]=degCoeff[i]+p.degCoeff[i];
            }
            for(int i=capacity;i<p.capacity;i++){
                newPoly[i]=p.degCoeff[i];
            }
        }
        
        Polynomial p3;
        p3.degCoeff= newPoly;
        p3.capacity = len;
        return p3;
        
    }
    
    // - operator overloading 
    Polynomial operator-(Polynomial p){
        int len=0;
        if(capacity>= p.capacity){
            len = capacity;
        }
        else{
            len = p.capacity;
        }
        int *newPoly = new int[len];
        for(int i=0;i<len;i++){
            newPoly[i]=0;
        }
        
        if(capacity<p.capacity){
            for(int i=0;i<capacity;i++){
                newPoly[i]= degCoeff[i]-p.degCoeff[i];
            }
            for(int i=capacity;i<p.capacity;i++){
                newPoly[i]= -p.degCoeff[i];
            }
        }
        else{
            for(int i=0;i<p.capacity;i++){
                newPoly[i]=degCoeff[i]-p.degCoeff[i];
            }
            for(int i=p.capacity;i<capacity;i++){
                newPoly[i]=degCoeff[i];
            }
        }
        
        Polynomial p3;
        p3.degCoeff=newPoly;
        p3.capacity = len;
        return p3;
    }
    
    // * overloading 
    Polynomial operator*( Polynomial p){
        
        int *newPoly= new int [capacity+p.capacity];
        // initialize the every elements 
        for(int i=0;i<p.capacity + capacity;i++){
            newPoly[i]=0;
        }
        
        for(int i=0;i<capacity;i++){
            for(int j=0;j<p.capacity;j++){
                newPoly[i+j] += degCoeff[i] * p.degCoeff[j];
            }
        }
        
        Polynomial p3;
        p3.degCoeff= newPoly;
        p3.capacity =p.capacity + capacity;
        return p3;
        
    }
    
    
    void print(){
            for(int i=0;i<capacity;i++){
                if(degCoeff[i] !=0)
                cout<<degCoeff[i]<<'x'<<i<<" ";
            }       
    }
};
